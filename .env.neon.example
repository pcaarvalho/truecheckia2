# Neon PostgreSQL Configuration for TrueCheckIA
# Copy this file to .env and update with your actual Neon credentials

# =============================================================================
# NEON POSTGRESQL CONFIGURATION
# =============================================================================

# Main pooled connection for application (required)
# Format: postgresql://username:password@ep-xxx-pooler.region.postgres.neon.tech:5432/database?sslmode=require&pgbouncer=true&connect_timeout=10
DATABASE_URL="postgresql://username:password@ep-your-endpoint-pooler.us-east-1.postgres.neon.tech:5432/neondb?sslmode=require&pgbouncer=true&connect_timeout=10"

# Direct connection for migrations (required)  
# Format: postgresql://username:password@ep-xxx.region.postgres.neon.tech:5432/database?sslmode=require&connect_timeout=10
DIRECT_URL="postgresql://username:password@ep-your-endpoint.us-east-1.postgres.neon.tech:5432/neondb?sslmode=require&connect_timeout=10"

# Shadow database for Prisma migrations (optional but recommended)
# Format: postgresql://username:password@ep-xxx-pooler.region.postgres.neon.tech:5432/shadow_database?sslmode=require&pgbouncer=true
SHADOW_DATABASE_URL="postgresql://username:password@ep-your-endpoint-pooler.us-east-1.postgres.neon.tech:5432/shadowdb?sslmode=require&pgbouncer=true"

# =============================================================================
# NEON CONFIGURATION NOTES
# =============================================================================

# POOLED vs DIRECT CONNECTIONS:
# - DATABASE_URL: Uses pooler for better serverless performance (recommended for app)
# - DIRECT_URL: Direct connection for migrations and admin tasks
# - SHADOW_DATABASE_URL: Separate database for Prisma schema diffing

# CONNECTION PARAMETERS:
# - sslmode=require: Forces SSL encryption (required for production)
# - pgbouncer=true: Enables connection pooling (recommended for serverless)
# - connect_timeout=10: Sets connection timeout to 10 seconds

# REGION RECOMMENDATIONS:
# - us-east-1: Best for Vercel deployments (lowest latency)
# - eu-central-1: Good for European users
# - Choose region closest to your primary user base

# BRANCH STRATEGY:
# - main: Production database
# - preview: Development/staging database (create from main branch)
# - Use Neon branching for feature development and testing

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =============================================================================

# DEVELOPMENT (.env.local)
# - Use preview branch or separate development database
# - Lower connection limits
# - More detailed logging

# PRODUCTION (.env.production or Vercel env vars)
# - Use main branch
# - Optimized connection pooling (25+ connections)
# - Minimal logging
# - Monitoring and alerting enabled

# STAGING (.env.staging)
# - Use preview branch or dedicated staging database
# - Production-like configuration but with lower limits
# - Used for final testing before production deployment

# =============================================================================
# VALIDATION COMMANDS
# =============================================================================

# Test your configuration:
# npm run test:neon              # Test connectivity
# npm run validate:neon          # Full validation
# npm run db:migrate             # Apply schema
# npm run db:seed               # Load sample data

# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================

# 1. Never commit this file to version control
# 2. Use environment variables in production (Vercel, etc.)
# 3. Rotate credentials regularly
# 4. Use IP allowlisting if needed
# 5. Monitor for unusual access patterns
# 6. Enable audit logging in Neon dashboard

# =============================================================================
# PERFORMANCE OPTIMIZATION
# =============================================================================

# CONNECTION POOLING SETTINGS (configure in Neon dashboard):
# - Pool Mode: Transaction (recommended for serverless)
# - Pool Size: 25 connections (adjust based on load)
# - Max Client Connections: 100
# - Pool Timeout: 30 seconds

# QUERY OPTIMIZATION:
# - Use prepared statements
# - Implement proper indexing
# - Monitor slow queries via pg_stat_statements
# - Use read replicas for analytics queries

# =============================================================================
# MONITORING AND ALERTING
# =============================================================================

# Set up alerts in Neon dashboard for:
# - CPU usage > 80%
# - Connection count > 90% of limit
# - Storage usage > 80%
# - Query response time > 1 second
# - Error rate > 1%

# Health check endpoints:
# GET /health/database           # Basic health
# GET /health/performance        # Performance metrics
# GET /metrics/database          # Detailed metrics