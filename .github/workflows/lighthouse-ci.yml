name: Lighthouse CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  push:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:

concurrency:
  group: lighthouse-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start preview server
        run: |
          cd frontend
          npx serve -s dist -l 4173 &
          sleep 5
        
      - name: Wait for server
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:4173; do sleep 1; done'

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=.lighthouserc.js

      - name: Archive Lighthouse reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-reports-${{ github.sha }}
          path: .lighthouseci
          retention-days: 7

  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: lighthouse
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Lighthouse reports
        uses: actions/download-artifact@v3
        with:
          name: lighthouse-reports-${{ github.sha }}
          path: .lighthouseci

      - name: Performance Budget Analysis
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Performance budgets
            const budgets = {
              performance: 90,
              accessibility: 95,
              'best-practices': 90,
              seo: 95,
              pwa: 80
            };
            
            try {
              // Find the latest Lighthouse report
              const reportsDir = '.lighthouseci';
              const files = fs.readdirSync(reportsDir);
              const jsonFiles = files.filter(f => f.endsWith('.json'));
              
              if (jsonFiles.length === 0) {
                console.log('No Lighthouse reports found');
                return;
              }
              
              const latestReport = jsonFiles[jsonFiles.length - 1];
              const reportPath = path.join(reportsDir, latestReport);
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const scores = {
                performance: Math.round(report.categories.performance.score * 100),
                accessibility: Math.round(report.categories.accessibility.score * 100),
                'best-practices': Math.round(report.categories['best-practices'].score * 100),
                seo: Math.round(report.categories.seo.score * 100),
                pwa: Math.round(report.categories.pwa.score * 100)
              };
              
              let comment = '## 🚦 Lighthouse Performance Report\n\n';
              comment += '| Category | Score | Budget | Status |\n';
              comment += '|----------|-------|--------|--------|\n';
              
              let allPassed = true;
              
              Object.entries(scores).forEach(([category, score]) => {
                const budget = budgets[category];
                const status = score >= budget ? '✅ Pass' : '❌ Fail';
                const icon = score >= budget ? '🟢' : score >= budget - 10 ? '🟡' : '🔴';
                
                if (score < budget) allPassed = false;
                
                comment += `| ${category.charAt(0).toUpperCase() + category.slice(1)} | ${icon} ${score} | ${budget} | ${status} |\n`;
              });
              
              comment += '\n### 📊 Performance Insights\n\n';
              
              // Core Web Vitals
              const metrics = report.audits;
              if (metrics['largest-contentful-paint']) {
                const lcp = Math.round(metrics['largest-contentful-paint'].numericValue);
                comment += `- **LCP**: ${lcp}ms ${lcp <= 2500 ? '✅' : '❌'}\n`;
              }
              
              if (metrics['first-input-delay']) {
                const fid = Math.round(metrics['first-input-delay'].numericValue);
                comment += `- **FID**: ${fid}ms ${fid <= 100 ? '✅' : '❌'}\n`;
              }
              
              if (metrics['cumulative-layout-shift']) {
                const cls = metrics['cumulative-layout-shift'].numericValue;
                comment += `- **CLS**: ${cls.toFixed(3)} ${cls <= 0.1 ? '✅' : '❌'}\n`;
              }
              
              comment += '\n### 🎯 Recommendations\n\n';
              
              if (scores.performance < budgets.performance) {
                comment += '- Consider optimizing images and lazy loading\n';
                comment += '- Review JavaScript bundle size\n';
                comment += '- Implement proper caching strategies\n';
              }
              
              if (scores.accessibility < budgets.accessibility) {
                comment += '- Review color contrast ratios\n';
                comment += '- Add proper ARIA labels\n';
                comment += '- Ensure keyboard navigation\n';
              }
              
              comment += `\n---\n*Report generated for commit ${context.sha.substring(0, 7)}*`;
              
              // Find existing comment and update or create new one
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.find(comment => 
                comment.body.includes('Lighthouse Performance Report')
              );
              
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: comment
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
              
              // Set action status
              if (!allPassed) {
                core.setFailed('Performance budget checks failed');
              }
              
            } catch (error) {
              console.error('Error processing Lighthouse report:', error);
              core.setFailed('Failed to process Lighthouse report');
            }