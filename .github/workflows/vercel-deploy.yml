name: Vercel Deploy

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: truecheckiagpt

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies (Root)
        run: npm ci
        
      - name: Install Frontend Dependencies
        run: cd frontend && npm ci
        
      - name: Security Audit
        run: |
          npm audit --audit-level=high
          cd frontend && npm audit --audit-level=high
          
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-check
    strategy:
      matrix:
        environment: [development, preview, production]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          
      - name: Lint Frontend
        run: cd frontend && npm run lint
        
      - name: Type Check Frontend
        run: cd frontend && npm run type-check
        
      - name: Build Frontend
        env:
          NODE_ENV: ${{ matrix.environment }}
        run: |
          cd frontend && npm run build
          
      - name: Test Backend (API)
        run: |
          cd apps/api && npm ci && npm run test
        continue-on-error: true
        
      - name: Upload Build Artifacts
        if: matrix.environment == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: frontend/dist
          retention-days: 1

  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    environment: 
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          
      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployed successfully!\n\n**Preview URL**: ${{ steps.deploy.outputs.preview-url }}\n\nâœ… Build completed at ${new Date().toISOString()}`
            })

  deploy-production:
    name: Deploy Production
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.production-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT
          
      - name: Post-Deploy Health Check
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.production-url }}
        run: |
          echo "Checking deployment health..."
          sleep 30  # Wait for deployment to be ready
          
          # Health endpoint check
          curl -f "$DEPLOYMENT_URL/api/health" || echo "Health check failed"
          
          # Security headers check
          curl -I "$DEPLOYMENT_URL" | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)" || echo "Security headers check completed"
          
      - name: Notify Success
        run: |
          echo "ðŸŽ‰ Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.production-url }}"

  monitor-deployment:
    name: Monitor Deployment
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Monitor Deployment Health
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          node vercel-diagnostic.js
          
      - name: Generate Deployment Report
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "## ðŸ“Š Deployment Report" > deployment-report.md
          echo "- **Date**: $(date)" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Actor**: ${{ github.actor }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Recent Deployments" >> deployment-report.md
          curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v6/deployments?projectId=truecheckiagpt&limit=3" | \
            jq -r '.deployments[] | "- **\(.state)**: \(.url) (Created: \(.createdAt))"' >> deployment-report.md
            
      - name: Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 30