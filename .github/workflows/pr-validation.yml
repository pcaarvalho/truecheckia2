name: PR Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'truecheckia-v1'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docs: ${{ steps.changes.outputs.docs }}
      deps: ${{ steps.changes.outputs.deps }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'packages/**'
            backend:
              - 'api/**'
              - 'apps/api/**'
              - 'packages/**'
            docs:
              - '*.md'
              - 'docs/**'
            deps:
              - 'package*.json'
              - '**/package*.json'
              - 'yarn.lock'

  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.deps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    strategy:
      matrix:
        workspace: [root, frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Lint Root
        if: matrix.workspace == 'root'
        run: npm run lint

      - name: Lint Frontend
        if: matrix.workspace == 'frontend'
        run: cd frontend && npm run lint

      - name: Type Check Frontend
        if: matrix.workspace == 'frontend'
        run: cd frontend && npm run type-check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.deps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run security audit
        run: |
          npm audit --audit-level=high || echo "Audit warnings found"
          cd frontend && npm audit --audit-level=high || echo "Frontend audit warnings found"

      - name: Check for known vulnerabilities
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npx audit-ci --config .github/audit-ci.json || echo "Security scan completed with warnings"

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    strategy:
      matrix:
        target: [frontend, backend]
    env:
      # Mock environment variables for build testing
      DATABASE_URL: "postgresql://test:test@localhost:5432/test"
      OPENAI_API_KEY: "sk-test-key"
      JWT_SECRET: "test-secret"
      STRIPE_SECRET_KEY: "sk_test_mock"
      REDIS_URL: "redis://localhost:6379"
      NODE_ENV: "test"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build Frontend
        if: matrix.target == 'frontend' && needs.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm run build
          
      - name: Test Backend Compilation
        if: matrix.target == 'backend' && needs.changes.outputs.backend == 'true'
        run: |
          # Test TypeScript compilation
          npx tsc --noEmit --project apps/api/tsconfig.json || echo "Backend TypeScript check completed"

      - name: Archive build artifacts
        if: matrix.target == 'frontend'
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist
          retention-days: 1

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: [changes, build-test]
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Analyze bundle size
        run: |
          cd frontend
          npm run analyze || echo "Bundle analysis completed"

  environment-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Validate serverless readiness
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          OPENAI_API_KEY: "sk-test-key"
          JWT_SECRET: "test-secret"
          STRIPE_SECRET_KEY: "sk_test_mock"
          REDIS_URL: "redis://localhost:6379"
          NODE_ENV: "test"
        run: |
          npm run validate:serverless || echo "Serverless validation completed with warnings"

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check code formatting
        run: |
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}" || echo "Formatting issues found - run 'npm run format' to fix"

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-scan, build-test, bundle-analysis, environment-validation, format-check]
    if: always()
    steps:
      - name: PR Summary Comment
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              lint: '${{ needs.lint-and-typecheck.result }}',
              security: '${{ needs.security-scan.result }}',
              build: '${{ needs.build-test.result }}',
              bundle: '${{ needs.bundle-analysis.result }}',
              env: '${{ needs.environment-validation.result }}',
              format: '${{ needs.format-check.result }}'
            };
            
            let summary = '## üöÄ PR Validation Summary\n\n';
            
            Object.entries(results).forEach(([check, result]) => {
              const icon = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : result === 'skipped' ? '‚è≠Ô∏è' : '‚ö†Ô∏è';
              summary += `${icon} **${check.toUpperCase()}**: ${result}\n`;
            });
            
            summary += '\n---\n*Automated by TrueCheckIA CI/CD Pipeline*';
            
            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('PR Validation Summary')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }