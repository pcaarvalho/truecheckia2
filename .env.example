# TrueCheckIA Environment Configuration - Development Template
# Copy this file to .env and fill in the actual values

# ====================================================================
# DATABASE CONFIGURATION
# ====================================================================

# Local Database (Development) - Docker PostgreSQL
DATABASE_URL="postgresql://postgres:your_postgres_password@localhost:5432/truecheckia?schema=public"
DIRECT_URL="postgresql://postgres:your_postgres_password@localhost:5432/truecheckia?schema=public"

# Neon Database (Production) - Uncomment and configure for production deployment
# DATABASE_URL="postgresql://username:password@your-endpoint.aws.neon.tech/database?sslmode=require&pgbouncer=true&connect_timeout=10&pool_timeout=10&statement_timeout=30000&idle_in_transaction_session_timeout=30000"
# DIRECT_URL="postgresql://username:password@your-endpoint.aws.neon.tech/database?sslmode=require&pgbouncer=true&connect_timeout=15"
# SHADOW_DATABASE_URL="postgresql://username:password@your-endpoint.aws.neon.tech/shadow?sslmode=require&pgbouncer=true&connect_timeout=15"

# ====================================================================
# API & SERVER CONFIGURATION
# ====================================================================

# API Server Configuration
API_PORT=4000
API_URL=http://localhost:4000
NEXT_PUBLIC_API_URL=http://localhost:4000/api
NEXT_PUBLIC_APP_URL=http://localhost:8081
VITE_API_URL=http://localhost:4000/api

# Environment Settings
NODE_ENV=development
NEXT_PUBLIC_ENV=development

# ====================================================================
# AI SERVICES
# ====================================================================

# OpenAI API Key - Get from https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-proj-your_openai_api_key_here

# ====================================================================
# SECURITY & AUTHENTICATION
# ====================================================================

# JWT Secrets - Generate strong random strings (64 characters recommended)
# Use: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
JWT_SECRET=your_jwt_secret_key_base64_encoded
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=your_jwt_refresh_secret_key_base64_encoded
JWT_REFRESH_EXPIRES_IN=30d

# CRON Secret - Generate random string for cron job authentication
CRON_SECRET=your_cron_secret_key_base64_encoded

# WEBHOOK Secret - Generate random string for webhook authentication
WEBHOOK_SECRET=your_webhook_secret_key_base64_encoded

# ====================================================================
# GOOGLE OAUTH
# ====================================================================

# Google OAuth Configuration - Get from https://console.developers.google.com/
GOOGLE_CLIENT_ID=your_google_client_id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret
GOOGLE_CALLBACK_URL=http://localhost:4000/api/auth/google/callback

# ====================================================================
# STRIPE PAYMENT PROCESSING
# ====================================================================

# Stripe API Keys - Get from https://dashboard.stripe.com/apikeys
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key

# Stripe Product Configuration - Create products in Stripe dashboard
STRIPE_PRO_PRODUCT_ID=prod_your_pro_product_id
STRIPE_ENTERPRISE_PRODUCT_ID=prod_your_enterprise_product_id
STRIPE_PRO_PRICE_MONTHLY=price_your_pro_monthly_price_id
STRIPE_PRO_PRICE_ANNUAL=price_your_pro_annual_price_id
STRIPE_PRO_PRICE_ID=price_your_pro_default_price_id
STRIPE_ENTERPRISE_PRICE_ID=price_your_enterprise_price_id

# ====================================================================
# UPSTASH REDIS (PRODUCTION CACHE)
# ====================================================================

# Upstash Redis - Get from https://console.upstash.com/
UPSTASH_REDIS_REST_URL="https://your-redis-instance.upstash.io"
UPSTASH_REDIS_REST_TOKEN="your_upstash_redis_token"

# Force serverless mode (set to true for serverless deployment)
FORCE_SERVERLESS=false

# ====================================================================
# EMAIL CONFIGURATION
# ====================================================================

# SMTP Settings (Development uses Mailhog - see docker-compose.yml)
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_USER=
SMTP_PASS=
SMTP_FROM=noreply@truecheckia.com

# For production, configure with your email provider:
# SMTP_HOST=smtp.your-email-provider.com
# SMTP_PORT=587
# SMTP_USER=your_smtp_username
# SMTP_PASS=your_smtp_password

# ====================================================================
# RATE LIMITING & CACHING
# ====================================================================

# Rate limiting configuration
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW_MS=900000

# Cache TTL in seconds (86400 = 24 hours)
CACHE_TTL=86400

# ====================================================================
# SETUP INSTRUCTIONS
# ====================================================================

# 1. Copy this file to .env
# 2. Replace all placeholder values with actual credentials
# 3. Generate JWT secrets using: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
# 4. For local development, start Docker services: docker-compose up -d
# 5. Run database migrations: npm run db:migrate
# 6. Seed development data: npm run db:seed
# 7. Start the application: npm run dev

# ====================================================================
# SECURITY NOTES
# ====================================================================

# - Never commit the actual .env file to version control
# - Use strong, unique secrets for production
# - Rotate secrets regularly
# - Use different databases for development and production
# - Keep API keys secure and monitor usage