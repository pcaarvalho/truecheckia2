# TrueCheckIA Production Environment Configuration
# This template is optimized for production deployment (Vercel/Serverless)

# ====================================================================
# PRODUCTION DATABASE - NEON POSTGRESQL
# ====================================================================

# Neon PostgreSQL (Primary Database)
# Get connection strings from Neon Dashboard: https://console.neon.tech/
DATABASE_URL="postgresql://username:password@ep-your-endpoint-pooler.region.aws.neon.tech/database?sslmode=require&pgbouncer=true&connect_timeout=10&pool_timeout=10&statement_timeout=30000&idle_in_transaction_session_timeout=30000"
DIRECT_URL="postgresql://username:password@ep-your-endpoint.region.aws.neon.tech/database?sslmode=require&connect_timeout=15"
SHADOW_DATABASE_URL="postgresql://username:password@ep-your-endpoint-pooler.region.aws.neon.tech/shadow?sslmode=require&pgbouncer=true&connect_timeout=15"

# ====================================================================
# PRODUCTION API & SERVER CONFIGURATION
# ====================================================================

# Production URLs - Replace with your actual domain
API_PORT=4000
API_URL=https://yourdomain.com
NEXT_PUBLIC_API_URL=https://yourdomain.com/api
NEXT_PUBLIC_APP_URL=https://yourdomain.com
VITE_API_URL=https://yourdomain.com/api

# Production Environment Settings
NODE_ENV=production
NEXT_PUBLIC_ENV=production

# ====================================================================
# AI SERVICES - PRODUCTION
# ====================================================================

# OpenAI API Key - Use production key with higher rate limits
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-proj-your_production_openai_api_key_here

# ====================================================================
# SECURITY & AUTHENTICATION - PRODUCTION
# ====================================================================

# Production JWT Secrets - Use strong, unique secrets
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('base64'))"
JWT_SECRET=your_production_jwt_secret_key_base64_encoded_64_chars
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=your_production_jwt_refresh_secret_key_base64_encoded_64_chars
JWT_REFRESH_EXPIRES_IN=30d

# Production CRON Secret - For serverless cron authentication
CRON_SECRET=your_production_cron_secret_key_base64_encoded_64_chars

# Production WEBHOOK Secret - For webhook authentication
WEBHOOK_SECRET=your_production_webhook_secret_key_base64_encoded_64_chars

# ====================================================================
# GOOGLE OAUTH - PRODUCTION
# ====================================================================

# Google OAuth Production Configuration
# Update redirect URLs in Google Console to production domain
GOOGLE_CLIENT_ID=your_production_google_client_id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_production_google_client_secret
GOOGLE_CALLBACK_URL=https://yourdomain.com/api/auth/google/callback

# ====================================================================
# STRIPE PAYMENT PROCESSING - PRODUCTION
# ====================================================================

# Stripe Production API Keys - Switch to live keys
STRIPE_SECRET_KEY=sk_live_your_stripe_live_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_live_webhook_secret
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_live_publishable_key

# Stripe Production Product Configuration
# Update with actual production product and price IDs from Stripe Dashboard
STRIPE_PRO_PRODUCT_ID=prod_your_live_pro_product_id
STRIPE_ENTERPRISE_PRODUCT_ID=prod_your_live_enterprise_product_id
STRIPE_PRO_PRICE_MONTHLY=price_your_live_pro_monthly_price_id
STRIPE_PRO_PRICE_ANNUAL=price_your_live_pro_annual_price_id
STRIPE_PRO_PRICE_ID=price_your_live_pro_default_price_id
STRIPE_ENTERPRISE_PRICE_ID=price_your_live_enterprise_price_id

# ====================================================================
# UPSTASH REDIS - PRODUCTION CACHE
# ====================================================================

# Upstash Redis Production - Get from https://console.upstash.com/
UPSTASH_REDIS_REST_URL="https://your-production-redis-instance.upstash.io"
UPSTASH_REDIS_REST_TOKEN="your_production_upstash_redis_token"

# Enable serverless mode for production deployment
FORCE_SERVERLESS=true

# ====================================================================
# EMAIL CONFIGURATION - PRODUCTION
# ====================================================================

# Production SMTP Configuration (e.g., SendGrid, AWS SES, Postmark)
SMTP_HOST=smtp.your-email-provider.com
SMTP_PORT=587
SMTP_USER=your_production_smtp_username
SMTP_PASS=your_production_smtp_password
SMTP_FROM=noreply@yourdomain.com

# Alternative: Resend (recommended for serverless)
# RESEND_API_KEY=re_your_resend_api_key

# ====================================================================
# RATE LIMITING & CACHING - PRODUCTION
# ====================================================================

# Production rate limiting (more restrictive)
RATE_LIMIT_MAX=1000
RATE_LIMIT_WINDOW_MS=900000

# Cache TTL in seconds (3600 = 1 hour for faster updates)
CACHE_TTL=3600

# ====================================================================
# MONITORING & ANALYTICS (OPTIONAL)
# ====================================================================

# Sentry for error tracking (optional)
# SENTRY_DSN=https://your_sentry_dsn@sentry.io/project_id

# Analytics (optional)
# GOOGLE_ANALYTICS_ID=GA-your_analytics_id
# MIXPANEL_TOKEN=your_mixpanel_token

# ====================================================================
# SERVERLESS DEPLOYMENT SETTINGS
# ====================================================================

# Vercel-specific environment variables
VERCEL=1
VERCEL_ENV=production

# Function timeout (max 60 seconds for hobby plan)
FUNCTION_TIMEOUT=30

# Edge runtime regions (optional)
VERCEL_REGION=us-east-1

# ====================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ====================================================================

# Before deploying to production:
# 
# 1. DATABASE SETUP:
#    - Create Neon PostgreSQL database
#    - Run migrations: npm run db:migrate
#    - Configure connection pooling
# 
# 2. REDIS SETUP:
#    - Create Upstash Redis instance
#    - Configure Redis for production workload
# 
# 3. SECURITY:
#    - Generate strong, unique secrets (64+ characters)
#    - Enable HTTPS only
#    - Configure CORS for production domain
#    - Set up rate limiting
# 
# 4. PAYMENTS:
#    - Switch to Stripe live keys
#    - Configure webhook endpoints
#    - Test payment flows
# 
# 5. EMAIL:
#    - Configure production SMTP provider
#    - Set up email templates
#    - Test email delivery
# 
# 6. MONITORING:
#    - Set up error tracking (Sentry)
#    - Configure logging
#    - Set up health checks
#    - Monitor API usage
# 
# 7. DEPLOYMENT:
#    - Configure domain and SSL
#    - Set up CI/CD pipeline
#    - Configure environment variables
#    - Test all integrations

# ====================================================================
# SECURITY NOTES FOR PRODUCTION
# ====================================================================

# - Use a secrets management service (AWS Secrets Manager, etc.)
# - Rotate all secrets regularly (monthly)
# - Use separate databases for staging and production
# - Enable database SSL and connection limits
# - Monitor API usage and set up alerts
# - Use strong CORS policies
# - Enable request logging and monitoring
# - Set up automated backups
# - Use CDN for static assets
# - Enable DDoS protection